
import discord
from discord.ext import commands
import json
import os
from typing import Dict, Any, Optional
import re

# Importation de ManagerCog pour l'autocompl√©tion
from .manager_cog import ManagerCog

# Importation de la librairie Gemini
try:
    import google.generativeai as genai
    from google.generativeai.types import GenerationConfig
    AI_AVAILABLE = True
except ImportError:
    AI_AVAILABLE = False

class AssistantCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.manager: Optional[ManagerCog] = None
        self.model: Optional[genai.GenerativeModel] = None

    async def cog_load(self):
        # Cette m√©thode est appel√©e lors du chargement du cog.
        self.manager = self.bot.get_cog('ManagerCog')
        if not self.manager:
            return print("ERREUR CRITIQUE: AssistantCog n'a pas pu trouver le ManagerCog.")
        
        if AI_AVAILABLE and self.manager.model:
            self.model = self.manager.model
            print("‚úÖ Assistant Cog: Mod√®le Gemini partag√© par ManagerCog charg√©.")
        else:
            print("‚ö†Ô∏è ATTENTION: AssistantCog d√©sactiv√© car aucun mod√®le AI n'est disponible.")

    async def _parse_gemini_json_response(self, text: str) -> Optional[Dict[str, Any]]:
        """Analyse de mani√®re robuste une r√©ponse JSON potentiellement mal format√©e de l'IA."""
        # Regex pour trouver un bloc JSON, m√™me s'il est entour√© de texte ou de d√©marqueurs de code.
        match = re.search(r'```(?:json)?\s*({.*?})\s*```', text, re.DOTALL)
        json_str = match.group(1) if match else text
        
        try:
            return json.loads(json_str)
        except json.JSONDecodeError as e:
            print(f"Erreur de d√©codage JSON dans AssistantCog: {e}\nTexte re√ßu: {text}")
            return None
            
    async def query_gemini_for_answer(self, question: str) -> Optional[Dict[str, Any]]:
        if not self.model or not self.manager:
            return None

        knowledge_base_str = json.dumps(self.manager.knowledge_base.get("faqs", []))
        products_list_str = json.dumps([{'id': p.get('id'), 'name': p.get('name'), 'category': p.get('category')} for p in self.manager.products])

        prompt = f"""
        Tu es "ResellBoost Assistant", un support IA pour le serveur Discord "ResellBoost". Ta mission est de r√©pondre aux questions des utilisateurs en te basant sur les informations fournies.
        
        Question de l'utilisateur: "{question}"

        Base de connaissances (FAQs):
        {knowledge_base_str}

        Liste des produits disponibles (pour r√©f√©rence, ne donne pas les prix):
        {products_list_str}

        Instructions:
        1. Analyse la question de l'utilisateur.
        2. Si la r√©ponse se trouve dans la base de connaissances, formule une r√©ponse claire et amicale.
        3. Si la question est d'ordre personnel (probl√®me de paiement, de compte) ou si tu ne trouves pas de r√©ponse, escalade en sugg√©rant de cr√©er un ticket.
        4. Si un produit du catalogue est pertinent pour la question, mentionne-le par son nom.
        5. Termine toujours ta r√©ponse par une suggestion de question de suivi naturelle.

        Tu DOIS r√©pondre au format JSON suivant. Ne mets rien d'autre que le JSON dans ta r√©ponse.
        {{
          "response_type": "answer" | "escalate",
          "content": "Ton texte de r√©ponse ici. Pour une escalade, guide l'utilisateur vers la cr√©ation d'un ticket avec la commande /ticket.",
          "suggested_follow_up": "Une suggestion de question de suivi pertinente" | null
        }}
        """
        try:
            generation_config = GenerationConfig(
                response_mime_type="application/json"
            )
            response = await self.model.generate_content_async(
                contents=prompt,
                generation_config=generation_config
            )
            return await self._parse_gemini_json_response(response.text)
        except Exception as e:
            print(f"Erreur Gemini (Assistant): {e}")
            return {"response_type": "escalate", "content": "D√©sol√©, une erreur technique est survenue lors de l'analyse de votre question.", "suggested_follow_up": "Puis-je vous aider avec autre chose ?"}

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        if message.author.bot or not self.manager or not self.manager.config.get("ASSISTANT_CONFIG", {}).get("ENABLED", False):
            return
        
        assistant_config = self.manager.config.get("ASSISTANT_CONFIG", {})
        monitored_channels = self.manager.config.get("CHANNELS", {}).get("ASSISTANT_MONITORED", [])
        
        is_monitored_channel = message.channel.name in monitored_channels
        is_dm = isinstance(message.channel, discord.DMChannel)
        is_mention = self.bot.user.mentioned_in(message)
        
        triggered = is_dm or is_mention
        if not triggered and is_monitored_channel:
            if any(keyword in message.content.lower() for keyword in assistant_config.get("PASSIVE_KEYWORDS", [])):
                triggered = True

        if triggered:
            question = re.sub(r'<@!?\d+>', '', message.content).strip()
            if not question: return
            
            async with message.channel.typing():
                response_data = await self.query_gemini_for_answer(question)
            
            if response_data:
                await self.handle_ia_response(message, response_data)

    async def handle_ia_response(self, message: discord.Message, response_data: Dict[str, Any]):
        response_type = response_data.get("response_type")
        content = response_data.get("content", "D√©sol√©, je n'ai pas de r√©ponse √† cela.")
        follow_up = response_data.get("suggested_follow_up")
        
        embed = discord.Embed()
        
        if response_type == "answer":
            embed.title = "üí° Assistant ResellBoost"
            embed.color = discord.Color.blue()
        else: # escalate
            embed.title = "ü§î Une aide humaine est peut-√™tre n√©cessaire"
            embed.color = discord.Color.orange()
            
        embed.description = content
        if follow_up:
            embed.set_footer(text=f"Suggestion : {follow_up}")
        
        await message.reply(embed=embed, mention_author=False)


async def setup(bot: commands.Bot):
    await bot.add_cog(AssistantCog(bot))
